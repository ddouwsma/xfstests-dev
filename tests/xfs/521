#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2020 Red Hat, Inc.  All Rights Reserved.
#
# FS QA Test 521
#
# Test xfs_repair's progress reporting
#
seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
	cd /
	rm -f $tmp.*
	_cleanup_delay > /dev/null 2>&1
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter
. ./common/dmdelay
. ./common/populate

# remove previous $seqres.full before test
rm -f $seqres.full

# real QA test starts here

# Modify as appropriate.
_supported_fs xfs
_supported_os Linux
_require_scratch
_require_dm_target delay

# Filter output specific to the formatters in xfs_repair/progress.c
# Ideally we'd like to see hits on anything that matches
# awk '/{FMT/' repair/progress.c
filter_repair()
{
	sed -ne '
	s/[0-9]\+/#/g;
	s/^\s\+/ /g;
	s/\(second\|minute\)s/\1/g
	/#:#:#:/p
	'
}

echo "Format and populate"
_scratch_populate_cached nofill > $seqres.full 2>&1

echo "Introduce a dmdelay"
_init_delay

# Introduce a read I/O delay
# The default in common/dmdelay is a bit too agressive
BLK_DEV_SIZE=`blockdev --getsz $SCRATCH_DEV`
DELAY_TABLE_RDELAY="0 $BLK_DEV_SIZE delay $SCRATCH_DEV 0 100 $SCRATCH_DEV 0 0"
_load_delay_table $DELAY_READ

echo "Run repair"
SCRATCH_DEV=$DELAY_DEV _scratch_xfs_repair -o ag_stride=4 -t 1 2>&1 |
        tee -a $seqres.full > $tmp.repair

cat $tmp.repair | filter_repair | sort -u

# success, all done
status=0
exit
