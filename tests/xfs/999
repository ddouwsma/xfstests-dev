#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2025 YOUR NAME HERE.  All Rights Reserved.
#
# FS QA Test 601
#
# what am I here for?
# Test for panic during ioerror reading xattr blocks
#
. ./common/preamble
_begin_fstest auto

# Override the default cleanup function.
_cleanup()
{
	cd /
	rm -f $tmp.*
	_dmerror_cleanup
}

# Import common functions.
# . ./common/filter
. ./common/dmerror

# real QA test starts here

# Modify as appropriate.
_supported_fs xfs
_require_scratch
_require_dm_target error

_scratch_mkfs >> $seqres.full
_scratch_mount

echo "Create extributes to push the attribute fork out of the inode" >> $seqres.full

# The length should be based off the inode size.
# For simplicity this assumes a value large enought to push out of the core.

touch $SCRATCH_MNT/testfile
setfattr -n user.test -v $(printf "teaddata:%0.512d" 1) $SCRATCH_MNT/testfile

startblock=$($XFS_IO_PROG -c "bmap -al" $SCRATCH_MNT/testfile | awk 'match($3, /[0-9]+/, a) {print a[0]}')

echo attribute fork at $startblock

_scratch_unmount

_dmerror_init >> $seqres.full 2>&1
_dmerror_reset_table
_dmerror_mount >> $seqres.full 2>&1

echo "Setup to error when readint the attrtribute block at $startblock" >> $seqres.full
_dmerror_mark_range_bad $startblock 1 $SCRATCH_DEV

# debug from 556
cat >> $seqres.full << ENDL
dmerror after marking bad:
$DMERROR_TABLE
$DMERROR_RTTABLE
<end table>
ENDL

_dmerror_load_error_table

# Panic here if failure
echo "Reread the extended attribute, panicing on unandled ioerrors" >> $seqres.full
getfattr -d - $SCRATCH_MNT/testfile

# if error
exit

# optional stuff if your test has verbose output to help resolve problems
#echo
#echo "If failure, check $seqres.full (this) and $seqres.full.ok (reference)"

# success, all done
status=0
exit
